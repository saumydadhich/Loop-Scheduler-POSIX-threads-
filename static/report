Question: Why do you think some of the measurements are so erratic?
Answer: For the same number of threads and intensity, the speedup of thread-level synchronisation increases dramatically with the increase of n. This is because iteration-level uses mutex much more than thread-level. This results in an increase in execution time, as everytime a mutex is used others thread a forbidden from using the variables in the mutex lock. This difference in the usage of mutex only increases with the increase of n. Hence, such massive difference between the speedup time of the 2.

Question: Why is the speedup of low intensity runs with iteration-level synchronization the way it is?
Answer: For low intensity runs, the speedup with iteration-level synchronisation is almost negligible. Intensity is used to make the program wait while calculation of the function. When intensity is low, the program waits for so little time that it does not make a considerable time difference if it is run sequentially or parallely. The time differece, however, is more prominently visible when the intensity is given a high value.

Question: Compare the speedup of iteration-level synchronization to thread-level synchronization. Why is it that way?
Answer: On average, the speedup of thread-level synchronisation is greater than iteration-level, especially when the value of n increases. The reason behind this is the number of times mutex is being used in both these type of synchronisation. Whenever mutex locks a variable, other threads cannot access that variable, resulting in an increase in the runtime of the program. In iteration-level, number of times mutex is used = n. In thread-level, mutex is used once per thread. Hence, the speedup will be same for both when n<=the number of threads. But when the value of n is greater, thread-level synchronisation will have a higher speerdup.
